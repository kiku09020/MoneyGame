//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/_Other/Input/InputActions/TestInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TestInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TestInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TestInputs"",
    ""maps"": [
        {
            ""name"": ""Collision_Player"",
            ""id"": ""8864e2f3-9eb1-4e55-9800-e27b6a6f03f2"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""1a320ae7-72ed-46e7-a5e7-45f8e4e5f146"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""097f90d0-1e62-4d3b-9c71-f6753079228b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3e80696f-0de1-4d4a-a0a4-ea782647aa0b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""959b276c-2b88-4089-98ff-27f3eae9b8fa"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""0340fff4-241c-440d-b6c1-d7b14c0a57e4"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0f6d7388-db79-4870-bbde-2765d557634c"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Collision_Player
        m_Collision_Player = asset.FindActionMap("Collision_Player", throwIfNotFound: true);
        m_Collision_Player_Jump = m_Collision_Player.FindAction("Jump", throwIfNotFound: true);
        m_Collision_Player_Move = m_Collision_Player.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Collision_Player
    private readonly InputActionMap m_Collision_Player;
    private ICollision_PlayerActions m_Collision_PlayerActionsCallbackInterface;
    private readonly InputAction m_Collision_Player_Jump;
    private readonly InputAction m_Collision_Player_Move;
    public struct Collision_PlayerActions
    {
        private @TestInputs m_Wrapper;
        public Collision_PlayerActions(@TestInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Collision_Player_Jump;
        public InputAction @Move => m_Wrapper.m_Collision_Player_Move;
        public InputActionMap Get() { return m_Wrapper.m_Collision_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Collision_PlayerActions set) { return set.Get(); }
        public void SetCallbacks(ICollision_PlayerActions instance)
        {
            if (m_Wrapper.m_Collision_PlayerActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_Collision_PlayerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_Collision_PlayerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_Collision_PlayerActionsCallbackInterface.OnJump;
                @Move.started -= m_Wrapper.m_Collision_PlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_Collision_PlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_Collision_PlayerActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_Collision_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public Collision_PlayerActions @Collision_Player => new Collision_PlayerActions(this);
    public interface ICollision_PlayerActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
}
